# Roadmap for Acoustic Player (MVVM Structure)

# Functions to be implemented / Progress / guidelines:
# - main.py: main(), load_config(), setup_logging ( )
# - models/player.py: MusicPlayer class, playback logic ( )
# - models/playlist.py: PlaylistManager class, track management ( )
# - models/metadata.py: MetadataManager class, tag reading/writing, duration, album art (✅)
# - viewmodels/player_vm.py: PlayerViewModel(QObject), exposes player state, commands, signals ( )
# - viewmodels/playlist_vm.py: PlaylistViewModel(QObject), exposes playlist state, signals ( )
# - viewmodels/metadata_vm.py: MetadataViewModel(QObject), exposes metadata, signals ( )
# - views/main_window.py: MainWindow(QMainWindow), binds to ViewModels ( )
# - views/widgets/seek_slider.py: SeekSlider(QSlider), track progress ( )
# - views/widgets/volume.py: VolumeControl(QWidget), volume/mute ( )
# - views/widgets/visualizer.py: VisualizerWidget(QWidget), audio visualization ( )
# - views/widgets/lyrics_display.py: LyricsDisplay(QWidget), synced lyrics ( )
# - utils.py: format_time, scan_music_folder, metadata_to_str, etc. (✅)
# - hotkeys.py: global hotkey support ( )
# - lyrics.py: lyrics support ( )
# - visualizer.py: audio visualizer logic ( )
# - mini_test.py: MiniTest(QPushButton), toggles text color on click (✅)

music_player/
├── main.py
│   - main(): Application startup, argument parsing, event loop.
│   - load_config(), setup_logging()
├── app/
│   ├── __init__.py
│   ├── models/
│   │   ├── player.py
│   │   │   - class MusicPlayer: Playback logic, state, audio control.
│   │   ├── playlist.py
│   │   │   - class PlaylistManager: Track list management.
│   │   ├── metadata.py
│   │   │   - class MetadataManager: Read/write tags, duration, album art.
│   ├── viewmodels/
│   │   ├── player_vm.py
│   │   │   - class PlayerViewModel(QObject): Exposes player state, commands, signals.
│   │   ├── playlist_vm.py
│   │   │   - class PlaylistViewModel(QObject): Exposes playlist state, signals.
│   │   ├── metadata_vm.py
│   │   │   - class MetadataViewModel(QObject): Exposes metadata, signals.
│   ├── views/
│   │   ├── main_window.py
│   │   │   - class MainWindow(QMainWindow): Main UI, binds to ViewModels.
│   │   ├── widgets/
│   │   │   ├── seek_slider.py
│   │   │   │   - class SeekSlider(QSlider): Track progress.
│   │   │   ├── volume.py
│   │   │   │   - class VolumeControl(QWidget): Volume/mute.
│   │   │   ├── visualizer.py
│   │   │   │   - class VisualizerWidget(QWidget): Audio visualization.
│   │   │   ├── lyrics_display.py
│   │   │   │   - class LyricsDisplay(QWidget): Synced lyrics.
│   ├── utils.py
│   │   - Utility functions: format_time, scan_music_folder, etc.
│   ├── hotkeys.py
│   ├── lyrics.py
│   ├── visualizer.py
│   ├── mini_test.py
│   │   - class MiniTest(QPushButton): Simple button for UI testing, toggles text color on click.
│   ├── styles/
│   │   ├── dark_theme.css
│   │   ├── light_theme.css
│   │   └── styles.py
│   ├── resources/
│   │   ├── icons/
│   │   ├── images/
│   │   └── resources.py
├── assets/
├── config/
│   ├── default_config.json
│   └── user_config.json
├── tests/
│   ├── test_player.py
│   ├── test_playlist.py
│   └── ...
├── requirements.txt
├── README.md
└── .gitignore

Notes:
- models/: Data and business logic (player, playlist, metadata).
- viewmodels/: QObject subclasses exposing properties/signals for UI binding.
- views/: UI components (windows, widgets) that bind to ViewModels.
- utils.py: Shared helper functions.
- Optional modules (lyrics, visualizer, hotkeys) can have their own MVVM structure if needed.
- mini_test.py: Contains MiniTest, a QPushButton subclass for UI testing and demonstration.
