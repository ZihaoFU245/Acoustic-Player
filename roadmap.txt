# Checklist & Structure: Acoustic Player (Web Frontend + Python Backend)

# Progress Legend: ( ) To Do, (âœ…) Done, (ðŸš§) In Progress

# --- Backend (Python: Django/Flask) ---

backend/
â”œâ”€â”€ main.py / manage.py         # Main application entry point (Flask/Django)
â”‚   â””â”€â”€ ( ) Setup basic Flask/Django app structure (routing, config loading)
â”œâ”€â”€ app/                          # Core application logic
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ models/                   # Data & Business Logic (Model)
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ player.py           # ( ) MusicPlayer class
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `play(track_path)`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `pause()` / `resume()`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `stop()`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `seek(position_ms)`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `set_volume(level)` (0-100)
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `get_status()` (state, current_track, position, duration, volume)
â”‚   â”‚   â”‚   â””â”€â”€ ( ) Handle playback events (end of track, errors)
â”‚   â”‚   â”œâ”€â”€ library.py          # ( ) LibraryManager class
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `scan_directory(path)` (recursive, find audio files)
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `add_track_to_db(track_metadata)`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `get_tracks(sort_by, filter)`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `search_tracks(query)`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `get_album_art(track_id)` (extract/find art)
â”‚   â”‚   â”‚   â””â”€â”€ ( ) `get_track_details(track_id)`
â”‚   â”‚   â”œâ”€â”€ playlist.py         # ( ) PlaylistManager class
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `create_playlist(name)`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `delete_playlist(playlist_id)`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `add_track(playlist_id, track_id)`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `remove_track(playlist_id, track_index)`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `get_playlist_tracks(playlist_id)`
â”‚   â”‚   â”‚   â””â”€â”€ ( ) `list_playlists()`
â”‚   â”‚   â”œâ”€â”€ metadata.py         # ( ) MetadataManager class (using mutagen)
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) `read_tags(file_path)` (title, artist, album, genre, track_num, duration, art)
â”‚   â”‚   â”‚   â””â”€â”€ ( ) `extract_embedded_art(file_path)`
â”‚   â”‚   â””â”€â”€ database.py / models.py # ( ) Database models (SQLAlchemy/Django ORM)
â”‚   â”‚       â”œâ”€â”€ ( ) Track model (path, title, artist, album, duration, etc.)
â”‚   â”‚       â”œâ”€â”€ ( ) Playlist model (name)
â”‚   â”‚       â””â”€â”€ ( ) PlaylistTrack model (linking table, track order)
â”‚   â”œâ”€â”€ api/                      # API Endpoints (ViewModel - Flask Blueprints/DRF ViewSets)
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ player_endpoints.py   # ( ) Player control API routes
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) GET `/api/player/status`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) POST `/api/player/play` { path: '...' }
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) POST `/api/player/pause`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) POST `/api/player/resume`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) POST `/api/player/stop`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) POST `/api/player/seek` { position: ... }
â”‚   â”‚   â”‚   â””â”€â”€ ( ) POST `/api/player/volume` { level: ... }
â”‚   â”‚   â”œâ”€â”€ library_endpoints.py  # ( ) Library management API routes
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) GET `/api/library/tracks` (with sorting/filtering params)
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) POST `/api/library/scan` { path: '...' }
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) GET `/api/library/search` { query: '...' }
â”‚   â”‚   â”‚   â””â”€â”€ ( ) GET `/api/library/art/{track_id}`
â”‚   â”‚   â”œâ”€â”€ playlist_endpoints.py # ( ) Playlist management API routes
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) GET `/api/playlists`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) POST `/api/playlists` { name: '...' }
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) DELETE `/api/playlists/{playlist_id}`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) GET `/api/playlists/{playlist_id}/tracks`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) POST `/api/playlists/{playlist_id}/tracks` { track_id: ... }
â”‚   â”‚   â”‚   â””â”€â”€ ( ) DELETE `/api/playlists/{playlist_id}/tracks/{track_index}`
â”‚   â”‚   â””â”€â”€ serializers.py        # ( ) Data serialization (Marshmallow/DRF Serializers)
â”‚   â”‚       â”œâ”€â”€ ( ) TrackSchema
â”‚   â”‚       â”œâ”€â”€ ( ) PlaylistSchema
â”‚   â”‚       â””â”€â”€ ( ) PlayerStatusSchema
â”‚   â”œâ”€â”€ services/                 # (Optional) Business logic services
â”‚   â”‚   â””â”€â”€ __init__.py
â”‚   â”‚   â””â”€â”€ audio_service.py      # ( ) Interface with audio lib (python-vlc instance management)
â”‚   â”‚       â”œâ”€â”€ ( ) Initialize VLC instance
â”‚   â”‚       â”œâ”€â”€ ( ) Create MediaPlayer object
â”‚   â”‚       â””â”€â”€ ( ) Manage player events/callbacks
â”‚   â”œâ”€â”€ utils.py                  # ( ) Utility functions (e.g., path handling, time formatting)
â”‚   â””â”€â”€ ws/                       # (Optional) WebSocket handling
â”‚       â””â”€â”€ __init__.py
â”‚       â””â”€â”€ consumers.py / events.py # ( ) WebSocket logic (Flask-SocketIO/Django Channels)
â”‚           â”œâ”€â”€ ( ) Emit `player_status_update` on changes
â”‚           â”œâ”€â”€ ( ) Emit `library_update` after scan
â”‚           â””â”€â”€ ( ) Emit `playlist_changed` on modification
â”œâ”€â”€ config/                     # Configuration files
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ settings.py / config.py # ( ) App settings (database URI, library paths, CORS origins)
â”‚   â””â”€â”€ default_config.json     # ( ) Default settings, user config persistence logic
â”œâ”€â”€ tests/                      # Unit/Integration tests (pytest)
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ test_player.py          # ( ) Test player state transitions (play, pause, stop)
â”‚   â”œâ”€â”€ test_library.py         # ( ) Test scanning, metadata reading, searching
â”‚   â”œâ”€â”€ test_playlist.py        # ( ) Test playlist creation, modification
â”‚   â”œâ”€â”€ test_api_player.py      # ( ) Test player API endpoint responses & side effects
â”‚   â”œâ”€â”€ test_api_library.py     # ( ) Test library API endpoints
â”‚   â””â”€â”€ test_api_playlist.py    # ( ) Test playlist API endpoints
â”œâ”€â”€ requirements.txt              # ( ) Python dependencies (Flask/Django, Flask-RESTful/DRF, python-vlc, mutagen, SQLAlchemy, Flask-SocketIO/Channels, pytest, requests)
â””â”€â”€ .gitignore                  # ( ) Git ignore file (add __pycache__, venv, *.db, config files)

# --- Frontend (HTML/CSS/JS - Using Electron.js) ---

frontend/ (Electron App Structure)
â”œâ”€â”€ main.js                     # ( ) Electron Main Process: Window creation, system integration, background tasks
â”œâ”€â”€ preload.js                  # ( ) Electron Preload Script: Securely expose Node.js APIs to Renderer
â”œâ”€â”€ index.html                    # ( ) Main HTML structure for the Renderer Process window
â”œâ”€â”€ css/                          # Styling
â”‚   â”œâ”€â”€ main.css                  # ( ) Core styles, layout (Flexbox/Grid), variables
â”‚   â”œâ”€â”€ theme.css                 # ( ) Theming (dark/light mode toggle, CSS variables)
â”‚   â””â”€â”€ components/               # (Optional) Component-specific styles
â”‚       â”œâ”€â”€ _player.css           # ( ) Player controls styling (buttons, sliders)
â”‚       â”œâ”€â”€ _playlist.css         # ( ) Playlist/library view styling (list items, scrollbars)
â”‚       â””â”€â”€ _visualizer.css       # ( ) Visualizer canvas styling
â”œâ”€â”€ js/ (Renderer Process Logic)  # JavaScript Logic (View)
â”‚   â”œâ”€â”€ renderer.js / app.js      # ( ) Main script for the renderer process, initialization
â”‚   â”œâ”€â”€ api.js                    # ( ) Module for backend API communication (using fetch/axios)
â”‚   â”‚   â”œâ”€â”€ ( ) `getPlayerStatus()`
â”‚   â”‚   â”œâ”€â”€ ( ) `sendCommand(command, payload)` (e.g., play, pause, seek, volume)
â”‚   â”‚   â”œâ”€â”€ ( ) `getLibraryTracks()`
â”‚   â”‚   â”œâ”€â”€ ( ) `scanLibrary()`
â”‚   â”‚   â”œâ”€â”€ ( ) `searchLibrary(query)`
â”‚   â”‚   â”œâ”€â”€ ( ) `getAlbumArtUrl(trackId)`
â”‚   â”‚   â”œâ”€â”€ ( ) `getPlaylists()`
â”‚   â”‚   â”œâ”€â”€ ( ) `createPlaylist(name)`
â”‚   â”‚   â””â”€â”€ ( ) `addTrackToPlaylist(playlistId, trackId)` ...etc.
â”‚   â”œâ”€â”€ state.js                  # ( ) Frontend state management (Simple object, or lib like Pinia/Redux/Zustand)
â”‚   â”‚   â”œâ”€â”€ ( ) `currentTrack`, `isPlaying`, `currentTime`, `duration`, `volume`
â”‚   â”‚   â”œâ”€â”€ ( ) `trackList`, `currentPlaylistId`, `playlists`
â”‚   â”‚   â””â”€â”€ ( ) Reactive updates triggering UI changes
â”‚   â”œâ”€â”€ utils.js                  # ( ) Frontend utility functions (time formatting, DOM helpers)
â”‚   â”œâ”€â”€ ipcRenderer.js            # ( ) Module for communicating with Electron Main Process (via preload.js)
â”‚   â”œâ”€â”€ ui/                       # UI component modules
â”‚   â”‚   â”œâ”€â”€ playerControls.js     # ( ) Play/Pause, Next/Prev, Volume logic
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) Add event listeners to buttons/slider
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) Call `api.js` functions on interaction
â”‚   â”‚   â”‚   â””â”€â”€ ( ) Update button states based on `state.js`
â”‚   â”‚   â”œâ”€â”€ seekBar.js            # ( ) Seek bar logic and updates
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) Update slider position based on `state.js` (currentTime/duration)
â”‚   â”‚   â”‚   â””â”€â”€ ( ) Call `api.js` seek function on slider change (drag end/click)
â”‚   â”‚   â”œâ”€â”€ trackInfo.js          # ( ) Display current track metadata (title, artist, album art)
â”‚   â”‚   â”‚   â””â”€â”€ ( ) Update display based on `state.js` (`currentTrack`)
â”‚   â”‚   â”œâ”€â”€ playlistView.js       # ( ) Display and interact with playlists/library
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) Fetch and render track list/playlists from `api.js`
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) Handle track selection (call `api.js` play)
â”‚   â”‚   â”‚   â””â”€â”€ ( ) Handle playlist management actions (create, add track)
â”‚   â”‚   â”œâ”€â”€ visualizer.js         # ( ) Audio visualization logic
â”‚   â”‚   â”‚   â”œâ”€â”€ ( ) Use Web Audio API `AnalyserNode` with `<audio>` element or stream
â”‚   â”‚   â”‚   â””â”€â”€ ( ) Draw visualization on `<canvas>` element
â”‚   â”‚   â””â”€â”€ lyricsDisplay.js        # ( ) Lyrics display logic
â”‚   â”‚       â””â”€â”€ ( ) Fetch lyrics from backend API (if implemented)
â”‚   â””â”€â”€ lib/                      # Third-party libraries (if not using CDN/bundler)
â”‚       â””â”€â”€ anime.min.js          # ( ) Animation library (for transitions, visualizer?)
â”œâ”€â”€ assets/                       # Static assets
â”‚   â”œâ”€â”€ icons/                    # ( ) UI Icons (Play, Pause, Next, Prev, Volume, etc. - SVG preferred)
â”‚   â”œâ”€â”€ fonts/                    # ( ) Custom fonts (if desired)
â”‚   â””â”€â”€ images/                   # ( ) Placeholder album art, logos etc.
â”œâ”€â”€ package.json                  # ( ) Frontend dependencies (Electron, electron-builder, maybe Vue/React, axios, state lib)
â””â”€â”€ .gitignore                  # ( ) Git ignore file (add node_modules, dist, .env)

# --- Overall Tasks ---

# - Backend Setup:
#   - ( ) Choose & Setup Backend Framework (Flask recommended for simplicity, Django for batteries-included)
#   - ( ) Setup API Framework (Flask-RESTful/Flask Blueprints or DRF)
#   - ( ) Configure CORS (Cross-Origin Resource Sharing)
#   - ( ) Choose & Integrate Audio Library (python-vlc seems suitable)
#   - ( ) Implement basic player model (`player.py`) & API endpoints (`player_endpoints.py`)
#       - ( ) Start with play/pause/stop/status
#   - ( ) Implement basic library scanning (`library.py`, `metadata.py`) & API endpoints (`library_endpoints.py`)
#       - ( ) Start with scanning a single folder and listing tracks
#   - ( ) Setup Database (SQLite for simplicity initially) & ORM (`database.py`)
# - Frontend Setup:
#   - ( ) Setup Electron project structure (main.js, preload.js, renderer process files)
#   - ( ) Configure Electron build process (electron-builder)
#   - ( ) Setup basic HTML structure (`index.html`)
#   - ( ) Setup basic CSS for layout (`main.css`)
#   - ( ) Implement API client module (`api.js`) to fetch backend data
#   - ( ) Implement basic player controls UI (`playerControls.js`, `seekBar.js`) & connect to API status/commands
#   - ( ) Implement basic track list display (`playlistView.js`) & connect to library API
#   - ( ) Setup IPC communication between Main and Renderer processes if needed (e.g., for native dialogs, global shortcuts)
# - Feature Implementation:
#   - ( ) Seeking functionality (Frontend slider -> API -> Backend player)
#   - ( ) Volume control (Frontend slider -> API -> Backend player)
#   - ( ) Playlist management (CRUD operations via UI -> API -> Backend playlist model)
#   - ( ) Metadata display (Fetch track details -> Update UI `trackInfo.js`)
#   - ( ) Album Artwork display (Backend endpoint -> Frontend `<img>` tag)
#   - ( ) UI Styling & Theming (Refine CSS, implement dark/light mode)
#   - ( ) Animations & Transitions (Use anime.js / CSS transitions for smoother UI)
#   - ( ) Audio Visualization (`visualizer.js` using Web Audio API)
#   - ( ) Lyrics display (Requires backend support for fetching/storing lyrics)
#   - ( ) Real-time updates (Implement WebSockets for player status, etc. - `ws/`, `socket.io-client`)
#   - ( ) Configuration/Settings persistence (Save/load library paths, theme from `config/default_config.json` or backend DB)
# - Polish & Deployment:
#   - ( ) Testing (Unit tests for backend, API tests, E2E tests for Electron app with Spectron/Playwright)
#   - ( ) Error Handling (Graceful error handling on frontend, backend, and Electron processes)
#   - ( ) Build/Packaging process (Use electron-builder to create installers/executables)
#   - ( ) Documentation (README with setup, usage, and build instructions)
#   - ( ) Consider code signing for distribution

